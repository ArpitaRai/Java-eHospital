package ui;

import hospitalsystem.JDBCConnection;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Appointment;
import model.ListDirectory;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author arpitarai
 */
public class PatientView extends javax.swing.JFrame {

    /**
     * Creates new form Patient1
     */
    ListDirectory appointmentList;

    public PatientView() {
        initComponents();
        doctorHospitalList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        searchHospital = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        bookAppointment = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        hospital = new javax.swing.JTextField();
        community = new javax.swing.JTextField();
        city = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        time = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        deleteAppointment = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        doctor1 = new javax.swing.JTextField();
        bookAppointment1 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        userID = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        symptoms = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentHistory = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        userid = new javax.swing.JTextField();
        searchHistory = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(243, 230, 234));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 51, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("NORTHEASTERN UNIVERSITY HOSPITAL MANAGEMENT SYSTEM");

        jButton4.setBackground(new java.awt.Color(135, 206, 250));
        jButton4.setText("LOGOUT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        searchHospital.setBackground(new java.awt.Color(231, 239, 246));
        searchHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHospitalActionPerformed(evt);
            }
        });
        searchHospital.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchHospitalKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchHospitalKeyTyped(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(231, 239, 246));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor", "Hospital", "Commmunity", "City"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        bookAppointment.setBackground(new java.awt.Color(135, 206, 250));
        bookAppointment.setText("Check Appointment");
        bookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentActionPerformed(evt);
            }
        });

        jLabel15.setText("Doctor");

        jLabel16.setText("Hospital");

        jLabel17.setText("Community");

        jLabel18.setText("City");

        jLabel19.setText("Date");

        jLabel20.setText("Time");

        patientName.setBackground(new java.awt.Color(231, 239, 246));
        patientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameActionPerformed(evt);
            }
        });

        hospital.setBackground(new java.awt.Color(231, 239, 246));

        community.setBackground(new java.awt.Color(231, 239, 246));

        city.setBackground(new java.awt.Color(231, 239, 246));

        date.setBackground(new java.awt.Color(231, 239, 246));

        time.setBackground(new java.awt.Color(231, 239, 246));

        jTable2.setBackground(new java.awt.Color(231, 239, 246));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time", "Doctor", "Hospital"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        deleteAppointment.setBackground(new java.awt.Color(250, 128, 114));
        deleteAppointment.setText("Delete Appointment");
        deleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointmentActionPerformed(evt);
            }
        });

        jLabel21.setText("Name");

        doctor1.setBackground(new java.awt.Color(231, 239, 246));
        doctor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctor1ActionPerformed(evt);
            }
        });

        bookAppointment1.setBackground(new java.awt.Color(135, 206, 250));
        bookAppointment1.setText("Create Appointment");
        bookAppointment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointment1ActionPerformed(evt);
            }
        });

        jLabel22.setText("UserID");

        userID.setBackground(new java.awt.Color(231, 239, 246));
        userID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIDActionPerformed(evt);
            }
        });

        jLabel23.setText("Symptoms");

        symptoms.setBackground(new java.awt.Color(231, 239, 246));

        jLabel25.setText("Search");

        jLabel26.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        jLabel26.setText("Hospital List");

        jLabel27.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        jLabel27.setText("Patient's Appointment");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel22))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jLabel20))))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(symptoms, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(city)
                            .addComponent(userID)
                            .addComponent(patientName)
                            .addComponent(doctor1)
                            .addComponent(hospital)
                            .addComponent(community)
                            .addComponent(date)
                            .addComponent(time))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(jLabel27))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(143, 143, 143)
                                .addComponent(bookAppointment)))
                        .addGap(95, 95, 95))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(bookAppointment1)
                        .addGap(49, 49, 49)
                        .addComponent(deleteAppointment)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(89, 89, 89))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(jLabel26)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21)
                                    .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15)
                                    .addComponent(doctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(community, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bookAppointment)))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(symptoms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(58, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(deleteAppointment)
                                    .addComponent(bookAppointment1))
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(userID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Home", jPanel2);

        jPanel3.setBackground(new java.awt.Color(243, 230, 234));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 51, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("NORTHEASTERN UNIVERSITY HOSPITAL MANAGEMENT SYSTEM");

        jButton6.setBackground(new java.awt.Color(135, 206, 250));
        jButton6.setText("LOGOUT");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        appointmentHistory.setBackground(new java.awt.Color(231, 239, 246));
        appointmentHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Doctor", "Hospital", "Symptoms"
            }
        ));
        jScrollPane1.setViewportView(appointmentHistory);

        jLabel24.setText("Enter your Email ID ");

        userid.setBackground(new java.awt.Color(231, 239, 246));
        userid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useridActionPerformed(evt);
            }
        });

        searchHistory.setBackground(new java.awt.Color(135, 206, 250));
        searchHistory.setText("SEARCH");
        searchHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHistoryActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        jLabel1.setText("Patient's Encounters History ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton6))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel24)
                        .addGap(43, 43, 43)
                        .addComponent(userid, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchHistory))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(searchHistory)))
                    .addComponent(userid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("History", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void bookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        Appointment appointmet= new Appointment();
        appointmet.setUserID(userID.getText());
        if ("".equals(appointmet.getUserID())|| appointmet.getUserID() == null) {
            JOptionPane.showMessageDialog(this, "Enter an email id to check for appointment!");
           
        }
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "Select * from JDBC_HospitalSchema.Appointment where UserID ='" + appointmet.getUserID() + "'";
                System.out.println(sql);
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setDate(resultSet.getString("Date"));
                    appointment.setTime(resultSet.getString("Time"));
                    appointment.setDoctor(resultSet.getString("Doctor"));
                    appointment.setHospitalName(resultSet.getString("HospitalName"));
                    System.out.println(" Apppointment Time : " + appointment.getTime());

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[4];
                        row[0] = appointmentObj.getDate();
                        row[1] = appointmentObj.getTime();
                        row[2] = appointmentObj.getDoctor();
                        row[3] = appointmentObj.getHospitalName();
                        model.addRow(row);
                    }
                } 
            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }//GEN-LAST:event_bookAppointmentActionPerformed

    private void patientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameActionPerformed

    private void deleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointmentActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = jTable2.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the row you want to DELETE");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                Appointment appointment = new Appointment();
                appointment.setUserID(userID.getText());

                String sql = "DELETE FROM JDBC_HospitalSchema.Appointment WHERE userid ='" + appointment.getUserID() + "'";
                System.out.println(sql);
                statement.executeUpdate(sql);
                appointmentList = new ListDirectory();
                JOptionPane.showMessageDialog(this, "Employee Deleted successfully!");
                model.setRowCount(0);
                userID.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
        appointmentTable();

    }//GEN-LAST:event_deleteAppointmentActionPerformed

    private void doctor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctor1ActionPerformed

    private void bookAppointment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointment1ActionPerformed
        // TODO add your handling code here:
        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();
        appointment.setPatientName(patientName.getText());
        appointment.setDoctor(doctor1.getText());
        appointment.setHospitalName(hospital.getText());
        appointment.setCommunity(community.getText());
        appointment.setDate(date.getText());
        appointment.setTime(time.getText());
        appointment.setUserID(userID.getText());
        appointment.setCity(city.getText());
        appointment.setSymptoms(symptoms.getText());

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();

                String sql = "INSERT INTO JDBC_HospitalSchema.Appointment " + "(UserID,PatientName, Doctor, HospitalName,CommunityName,Date,Time,CityName, Symptoms)"
                        + "VALUES ('" + appointment.getUserID() + "' ,'" + appointment.getPatientName() + "' , '" + appointment.getDoctor() + "' , '" + appointment.getHospitalName() + "', '"
                        + appointment.getCommunity() + "', '" + appointment.getDate() + "', '" + appointment.getTime() + "', '" + appointment.getCity() + "', '" + appointment.getSymptoms() + "');";

                statement.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Appointment created secccessfully!!");
                patientName.setText("");
                doctor1.setText("");
                hospital.setText("");
                community.setText("");
                date.setText("");
                time.setText("");
                symptoms.setText("");
                city.setText("");
                userID.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }


    }//GEN-LAST:event_bookAppointment1ActionPerformed

    private void userIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userIDActionPerformed

    private void useridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useridActionPerformed

    private void searchHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHospitalActionPerformed
        // TODO add your handling code here:

//        private void filter(String query){
//        }
    }//GEN-LAST:event_searchHospitalActionPerformed

    private void searchHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHistoryActionPerformed
        // TODO add your handling code here:

        Appointment appointment = new Appointment();;
        appointment.setUserID(userid.getText());

        DefaultTableModel model = (DefaultTableModel) appointmentHistory.getModel();
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                appointment.setUserID(userid.getText());
                String sql = "SELECT * FROM JDBC_HospitalSchema.Appointment where  UserID='" + appointment.getUserID() + "'";
                System.out.println(sql);
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment1 = appointmentList.addAppointment();
                    appointment1.setDoctor(resultSet.getString("Doctor"));
                    appointment1.setDate(resultSet.getString("Date"));
                    appointment1.setSymptoms(resultSet.getString("Symptoms"));
                    appointment1.setHospitalName(resultSet.getString("HospitalName"));
                    System.out.println(" Apppointment Time : " + appointment.getTime());

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[4];
                        row[0] = appointmentObj.getDate();
                        row[3] = appointmentObj.getSymptoms();
                        row[1] = appointmentObj.getDoctor();
                        row[2] = appointmentObj.getHospitalName();
                        model.addRow(row);
                    }
                }
            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }//GEN-LAST:event_searchHistoryActionPerformed

    private void searchHospitalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchHospitalKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_searchHospitalKeyTyped

    private void searchHospitalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchHospitalKeyReleased
        // TODO add your handling code here:

        String query = searchHospital.getText();
        filterSearch(query);
    }//GEN-LAST:event_searchHospitalKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        String doctor = (String) model.getValueAt(selectedRowIndex, 0);
        String hospital1 = (String) model.getValueAt(selectedRowIndex, 1);
        String community1 = (String) model.getValueAt(selectedRowIndex, 2);
        String city1 = (String) model.getValueAt(selectedRowIndex, 3);
        doctor1.setText(doctor);
        hospital.setText(hospital1);
        community.setText(community1);
        city.setText(city1);

    }//GEN-LAST:event_jTable1MouseClicked

    private void appointmentTable() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "Select * from JDBC_HospitalSchema.Appointment";
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setDate(resultSet.getString("Date"));
                    appointment.setTime(resultSet.getString("Time"));
                    appointment.setDoctor(resultSet.getString("Doctor"));
                    appointment.setHospitalName(resultSet.getString("HospitalName"));
                    System.out.println(" Apppointment Time : " + appointment.getTime());

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[4];
                        row[0] = appointmentObj.getDate();
                        row[1] = appointmentObj.getTime();
                        row[2] = appointmentObj.getDoctor();
                        row[3] = appointmentObj.getHospitalName();
                        model.addRow(row);
                    }

                }

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }

    private void doctorHospitalList() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "SELECT * FROM JDBC_HospitalSchema.HospitalDetails;";
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setDoctor(resultSet.getString("DoctorName"));
                    appointment.setHospitalName(resultSet.getString("HospitalName"));
                    appointment.setCommunity(resultSet.getString("Community"));
                    appointment.setCity(resultSet.getString("City"));

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[4];
                        row[0] = appointmentObj.getDoctor();
                        row[1] = appointmentObj.getHospitalName();
                        row[2] = appointmentObj.getCommunity();
                        row[3] = appointmentObj.getCity();
                        model.addRow(row);
                    }

                }
            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentHistory;
    private javax.swing.JButton bookAppointment;
    private javax.swing.JButton bookAppointment1;
    private javax.swing.JTextField city;
    private javax.swing.JTextField community;
    private javax.swing.JTextField date;
    private javax.swing.JButton deleteAppointment;
    private javax.swing.JTextField doctor1;
    private javax.swing.JTextField hospital;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField patientName;
    private javax.swing.JToggleButton searchHistory;
    private javax.swing.JTextField searchHospital;
    private javax.swing.JTextField symptoms;
    private javax.swing.JTextField time;
    private javax.swing.JTextField userID;
    private javax.swing.JTextField userid;
    // End of variables declaration//GEN-END:variables

    private void filterSearch(String query) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(model);
        jTable1.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(query));
    }
}
