package ui;

import hospitalsystem.JDBCConnection;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Appointment;
import model.ListDirectory;
import utilities.Validations;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author arpitarai
 */
public class DoctorView extends javax.swing.JFrame {

    /**
     * Creates new form Doctor
     */
    ListDirectory appointmentList;

    public DoctorView() {
        initComponents();
        patientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        patientSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        heartRate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bloodPressure = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        prescription = new javax.swing.JTextField();
        diagnosis = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        patientUserID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        patientName1 = new javax.swing.JTextField();
        genderCombo = new javax.swing.JComboBox<>();
        updatePatient = new javax.swing.JButton();
        deletePatient = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientAppointments = new javax.swing.JTable();
        appointmentView = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        doctorName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(227, 240, 255));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 51, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("NORTHEASTERN UNIVERSITY HOSPITAL MANAGEMENT SYSTEM");

        jButton4.setBackground(new java.awt.Color(176, 224, 230));
        jButton4.setText("LOGOUT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        patientSearch.setBackground(new java.awt.Color(231, 239, 246));
        patientSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                patientSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientSearchKeyReleased(evt);
            }
        });

        patientHistory.setBackground(new java.awt.Color(231, 239, 246));
        patientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Email", "Name", "Blood Pressure", "Heart Rate", "Reason for Visit", "Date", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientHistoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientHistory);

        jLabel1.setText("Patient Name");

        heartRate.setBackground(new java.awt.Color(231, 239, 246));

        jLabel2.setText("Blood Pressure");

        bloodPressure.setBackground(new java.awt.Color(231, 239, 246));

        jLabel3.setText("Prescription");

        prescription.setBackground(new java.awt.Color(231, 239, 246));

        diagnosis.setBackground(new java.awt.Color(231, 239, 246));

        jLabel9.setText("Reason for Visit");

        jLabel10.setText("Date");

        date.setBackground(new java.awt.Color(231, 239, 246));

        jButton2.setBackground(new java.awt.Color(135, 206, 250));
        jButton2.setText("Create Patient");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setText("Heart Rate");

        patientUserID.setBackground(new java.awt.Color(231, 239, 246));

        jLabel4.setText("Gender");

        jLabel8.setText("Patient Email ID");

        patientName1.setBackground(new java.awt.Color(231, 239, 246));

        genderCombo.setBackground(new java.awt.Color(231, 239, 246));
        genderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        updatePatient.setBackground(new java.awt.Color(135, 206, 250));
        updatePatient.setText("Update Patient");
        updatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientActionPerformed(evt);
            }
        });

        deletePatient.setBackground(new java.awt.Color(250, 128, 114));
        deletePatient.setText("Delete Patient");
        deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientActionPerformed(evt);
            }
        });

        jLabel13.setText("Search");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel7.setText("Patient Details");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bloodPressure))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel11)
                                                    .addComponent(jLabel10))
                                                .addGap(39, 39, 39)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 34, Short.MAX_VALUE))
                                                    .addComponent(heartRate)
                                                    .addComponent(date)))
                                            .addComponent(jLabel4)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(patientUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addGap(18, 18, 18)
                                                .addComponent(prescription, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                .addGap(70, 70, 70)
                                                .addComponent(jLabel9)
                                                .addGap(18, 18, 18)
                                                .addComponent(diagnosis, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(109, 109, 109)
                                        .addComponent(jButton2)
                                        .addGap(18, 18, 18)
                                        .addComponent(updatePatient)
                                        .addGap(18, 18, 18)
                                        .addComponent(deletePatient)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(24, 24, 24)
                                .addComponent(patientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(215, 215, 215)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(patientSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(40, 40, 40))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(8, 8, 8)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(diagnosis, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(patientUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(prescription, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(heartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(updatePatient)
                            .addComponent(deletePatient))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(bloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))))
        );

        jTabbedPane1.addTab("Patients", jPanel2);

        jPanel3.setBackground(new java.awt.Color(227, 240, 255));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 51, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("NORTHEASTERN UNIVERSITY HOSPITAL MANAGEMENT SYSTEM");

        jButton5.setBackground(new java.awt.Color(176, 224, 230));
        jButton5.setText("LOGOUT");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        patientAppointments.setBackground(new java.awt.Color(231, 239, 246));
        patientAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Date", "Time", "Symptoms"
            }
        ));
        jScrollPane2.setViewportView(patientAppointments);

        appointmentView.setBackground(new java.awt.Color(135, 206, 250));
        appointmentView.setText("View Appointments");
        appointmentView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentViewActionPerformed(evt);
            }
        });

        jLabel12.setText("Doctor Name");

        doctorName.setBackground(new java.awt.Color(231, 239, 246));
        doctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(39, 39, 39)
                        .addComponent(doctorName)
                        .addGap(18, 18, 18)
                        .addComponent(appointmentView)
                        .addGap(189, 189, 189))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(22, 22, 22))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentView)
                    .addComponent(jLabel12)
                    .addComponent(doctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 251, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Appointments", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void appointmentViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentViewActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) patientAppointments.getModel();
        Appointment appointment1 = new Appointment();
        appointment1.setDoctor(doctorName.getText());

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "SELECT * FROM JDBC_HospitalSchema.Appointment where Doctor ='" + appointment1.getDoctor() + "'";
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setPatientName(resultSet.getString("PatientName"));
                    appointment.setDate(resultSet.getString("Date"));
                    appointment.setTime(resultSet.getString("Time"));
                    appointment.setSymptoms(resultSet.getString("Symptoms"));

                    System.out.println(sql);

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[4];
                        row[0] = appointmentObj.getPatientName();
                        row[1] = appointmentObj.getDate();
                        row[2] = appointmentObj.getTime();
                        row[3] = appointmentObj.getSymptoms();
                        model.addRow(row);
                    }

                }
            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }//GEN-LAST:event_appointmentViewActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();
        appointment.setPatientName(patientName1.getText());
        appointment.setUserID(patientUserID.getText());
        appointment.setGender((String) genderCombo.getSelectedItem());
        appointment.setDate(date.getText());
        appointment.setHeartRate(heartRate.getText());
        appointment.setBloodPressure(bloodPressure.getText());
        appointment.setPrescription(prescription.getText());
        appointment.setDiagnosis(diagnosis.getText());

        if (appointment.getUserID() == null || appointment.getUserID().trim().isEmpty() || "".equals(appointment.getUserID())
                || appointment.getPatientName() == null || appointment.getPatientName().trim().isEmpty() || "".equals(appointment.getPatientName())
                || appointment.getGender() == null || appointment.getGender().trim().isEmpty() || "".equals(appointment.getGender())
                || appointment.getHeartRate() == null || appointment.getHeartRate().trim().isEmpty() || "".equals(appointment.getHeartRate())
                || appointment.getDate() == null || appointment.getDate().trim().isEmpty() || "".equals(appointment.getDate())
                || appointment.getBloodPressure() == null || appointment.getBloodPressure().trim().isEmpty() || "".equals(appointment.getBloodPressure())
                || appointment.getPrescription() == null || appointment.getPrescription().trim().isEmpty() || "".equals(appointment.getPrescription())
                || appointment.getDiagnosis() == null || appointment.getDiagnosis().trim().isEmpty() || "".equals(appointment.getDiagnosis())) {
            JOptionPane.showMessageDialog(this, "Please Enter all credentials!");
            return;
        }

        if (!Validations.isValidDate(appointment.getDate())) {
            JOptionPane.showMessageDialog(this, "Incorrect Date Format!");
            date.setText("");
            return;
        }

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();

                String sql = "INSERT INTO JDBC_HospitalSchema.PatientTable " + "(Date, PatientName, Gender, PatientUserID, HeartRate, BP, Diagnosis, Prescription)"
                        + "VALUES ('" + appointment.getDate() + "' , '" + appointment.getPatientName() + "' , '" + appointment.getGender() + "' , '" + appointment.getUserID() + "', '"
                        + appointment.getHeartRate() + "', '" + appointment.getBloodPressure() + "', '" + appointment.getDiagnosis() + "', '" + appointment.getPrescription() + "');";
                
                System.out.println(sql);
                statement.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Patient created secccessfully!!");
                patientName1.setText("");
                patientUserID.setText("");
                date.setText("");
                date.setText("");
                heartRate.setText("");
                bloodPressure.setText("");
                prescription.setText("");
                diagnosis.setText("");
                patientTable();

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, "Patient Email doesn't exist, please register!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void doctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorNameActionPerformed

    private void patientHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientHistoryMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) patientHistory.getModel();
        int selectedRowIndex = patientHistory.getSelectedRow();
        String emailId = (String) model.getValueAt(selectedRowIndex, 0);
        String patientName = (String) model.getValueAt(selectedRowIndex, 1);
        String bp = (String) model.getValueAt(selectedRowIndex, 2);
        String heartRate1 = (String) model.getValueAt(selectedRowIndex, 3);
        String reason = (String) model.getValueAt(selectedRowIndex, 4);
        String date1 = (String) model.getValueAt(selectedRowIndex, 5);
        String prescription1 = (String) model.getValueAt(selectedRowIndex, 6);
        patientName1.setText(patientName);
        bloodPressure.setText(bp);
        heartRate.setText(heartRate1);
        date.setText(date1);
        diagnosis.setText(reason);
        prescription.setText(prescription1);
        patientUserID.setText(emailId);

    }//GEN-LAST:event_patientHistoryMouseClicked

    private void deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = patientHistory.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the row you want to DELETE");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) patientHistory.getModel();
        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                appointment.setUserID(patientUserID.getText());

                String sql = "DELETE FROM JDBC_HospitalSchema.PatientTable WHERE PatientUserID ='" + appointment.getUserID() + "'";
                System.out.println(sql);
               int a=  statement.executeUpdate(sql);
                appointmentList = new ListDirectory();
                if(0==a)
                { JOptionPane.showMessageDialog(this, "Deletion Failed, enter the correct details!");
                return;
                    }
                JOptionPane.showMessageDialog(this, "Patient Deleted successfully!");
                model.setRowCount(0);
                patientName1.setText("");
                bloodPressure.setText("");
                heartRate.setText("");
                date.setText("");
                diagnosis.setText("");
                prescription.setText("");
                patientUserID.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
        patientTable();
    }//GEN-LAST:event_deletePatientActionPerformed

    private void updatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = patientHistory.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the row you want to UPDATE");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) patientHistory.getModel();
        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();
        appointment.setPatientName(patientName1.getText());
        appointment.setUserID(patientUserID.getText());
        appointment.setGender((String) genderCombo.getSelectedItem());
        appointment.setDate(date.getText());
        appointment.setHeartRate(heartRate.getText());
        appointment.setBloodPressure(bloodPressure.getText());
        appointment.setPrescription(prescription.getText());
        appointment.setDiagnosis(diagnosis.getText());

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "UPDATE JDBC_HospitalSchema.PatientTable SET PatientName = '" + appointment.getPatientName()
                        + "' , Gender = '" + appointment.getGender() + "' ,HeartRate = '" + appointment.getHeartRate() + "' , BP = '"
                        + appointment.getBloodPressure() + "' , Diagnosis = '" + appointment.getDiagnosis()
                        + "' , Prescription = '" + appointment.getPrescription() + "' , Date = '" + appointment.getDate()
                        + "' where PatientUserID ='" + appointment.getUserID() + "'";
                System.out.println(sql);
                int a= statement.executeUpdate(sql);
                System.out.println(sql);  
                if(0==a)
                { JOptionPane.showMessageDialog(this, "Updation Failed, enter the correct details!");
                return;
                    }
                JOptionPane.showMessageDialog(this, "Doctor UPDATED successfully!");
                model.setRowCount(0);
                patientName1.setText("");
                patientUserID.setText("");
                date.setText("");
                date.setText("");
                heartRate.setText("");
                bloodPressure.setText("");
                prescription.setText("");
                diagnosis.setText("");
                patientTable();

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, "UserID doesn't exist!");
        }
        patientTable();
    }//GEN-LAST:event_updatePatientActionPerformed

    private void patientSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientSearchKeyPressed
        // TODO add your handling code here:


    }//GEN-LAST:event_patientSearchKeyPressed

    private void patientSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientSearchKeyReleased
        // TODO add your handling code here:

        String query = patientSearch.getText();
        filterSearch(query);
    }//GEN-LAST:event_patientSearchKeyReleased

    private void patientTable() {
        DefaultTableModel model = (DefaultTableModel) patientHistory.getModel();
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "Select * from JDBC_HospitalSchema.PatientTable";
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setPatientName(resultSet.getString("PatientName"));
                    appointment.setBloodPressure(resultSet.getString("BP"));
                    appointment.setHeartRate(resultSet.getString("HeartRate"));
                    appointment.setDiagnosis(resultSet.getString("Diagnosis"));
                    appointment.setDate(resultSet.getString("Date"));
                    appointment.setPrescription(resultSet.getString("Prescription"));
                    appointment.setUserID(resultSet.getString("PatientUserID"));

                    System.out.println(" User ID : " + appointment.getUserID());

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[7];
                        row[0] = appointmentObj.getUserID();
                        row[1] = appointmentObj.getPatientName();
                        row[2] = appointmentObj.getBloodPressure();
                        row[3] = appointmentObj.getHeartRate();
                        row[4] = appointmentObj.getDiagnosis();
                        row[5] = appointmentObj.getDate();       
                        row[6] = appointmentObj.getPrescription();
                        model.addRow(row);
                    }

                }

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorView().setVisible(true);
            }
        });
    }

    private void filterSearch(String query) {
        DefaultTableModel model = (DefaultTableModel) patientHistory.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(model);
        patientHistory.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(query));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appointmentView;
    private javax.swing.JTextField bloodPressure;
    private javax.swing.JTextField date;
    private javax.swing.JButton deletePatient;
    private javax.swing.JTextField diagnosis;
    private javax.swing.JTextField doctorName;
    private javax.swing.JComboBox<String> genderCombo;
    private javax.swing.JTextField heartRate;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable patientAppointments;
    private javax.swing.JTable patientHistory;
    private javax.swing.JTextField patientName1;
    private javax.swing.JTextField patientSearch;
    private javax.swing.JTextField patientUserID;
    private javax.swing.JTextField prescription;
    private javax.swing.JButton updatePatient;
    // End of variables declaration//GEN-END:variables
}
