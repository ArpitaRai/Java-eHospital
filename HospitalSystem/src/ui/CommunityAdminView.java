package ui;

import hospitalsystem.JDBCConnection;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Appointment;
import model.ListDirectory;
import model.LogInCredential;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author arpitarai
 */
public class CommunityAdminView extends javax.swing.JFrame {

    /**
     * Creates new form CommunityView
     */
    ListDirectory appointmentList;

    public CommunityAdminView() {
        initComponents();
        hospitalTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        updateHospital = new javax.swing.JButton();
        deleteHospital = new javax.swing.JButton();
        createHospital = new javax.swing.JButton();
        cityName = new javax.swing.JTextField();
        hospitalContact = new javax.swing.JTextField();
        hospital = new javax.swing.JTextField();
        communityName = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(243, 230, 234));

        jButton3.setBackground(new java.awt.Color(176, 224, 230));
        jButton3.setText("LOGOUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 51, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("NORTHEASTERN UNIVERSITY HOSPITAL MANAGEMENT SYSTEM");

        updateHospital.setBackground(new java.awt.Color(135, 206, 250));
        updateHospital.setText("Update Hospital");
        updateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalActionPerformed(evt);
            }
        });

        deleteHospital.setBackground(new java.awt.Color(250, 128, 114));
        deleteHospital.setText("Delete Hospital");
        deleteHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHospitalActionPerformed(evt);
            }
        });

        createHospital.setBackground(new java.awt.Color(135, 206, 250));
        createHospital.setText("Create Hospital");
        createHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHospitalActionPerformed(evt);
            }
        });

        cityName.setBackground(new java.awt.Color(231, 239, 246));

        hospitalContact.setBackground(new java.awt.Color(231, 239, 246));

        hospital.setBackground(new java.awt.Color(231, 239, 246));

        communityName.setBackground(new java.awt.Color(231, 239, 246));

        hospitalTable.setAutoCreateRowSorter(true);
        hospitalTable.setBackground(new java.awt.Color(231, 239, 246));
        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital Name", "Community", "City", "Hospital Contact"
            }
        ));
        hospitalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(hospitalTable);

        jLabel1.setText("Hospital Name");

        jLabel2.setText("Community");

        jLabel4.setText("City");

        jLabel5.setText("Hospital Contact ");

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel12.setText(" Hospital Details");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 103, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(59, 59, 59)
                .addComponent(jButton3))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4))
                                        .addGap(28, 28, 28))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)))
                                .addComponent(hospitalContact, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(281, 281, 281))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(149, 149, 149)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(createHospital)
                            .addGap(18, 18, 18)
                            .addComponent(updateHospital)
                            .addGap(27, 27, 27)
                            .addComponent(deleteHospital))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(114, 114, 114)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cityName, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(communityName, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                    .addComponent(hospital)))))
                    .addContainerGap(259, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel6))
                .addGap(55, 55, 55)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(hospitalContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 114, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(329, 329, 329)
                    .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(17, 17, 17)
                    .addComponent(communityName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(cityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(89, 89, 89)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(createHospital)
                        .addComponent(deleteHospital)
                        .addComponent(updateHospital))
                    .addContainerGap(50, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Hospital ", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        LogInPage logInPage = new LogInPage();
        CommunityAdminView communityAdmin = new CommunityAdminView();
        communityAdmin.setVisible(false);
        logInPage.show();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void updateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the row you want to UPDATE");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();
        appointment.setHospitalName(hospital.getText());
        appointment.setCommunity(communityName.getText());
        appointment.setCity(cityName.getText());
        appointment.setHospitalContact(hospitalContact.getText());

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "UPDATE JDBC_HospitalSchema.HospitalDetails SET City = '" + appointment.getCity() + "' ,HospitalName = '" + appointment.getHospitalName()
                        + "' ,Contact = '" + appointment.getHospitalContact() + "' where Community ='" + appointment.getCommunity() + "'";
                System.out.println(sql);
                int a = statement.executeUpdate(sql);
                if (a == 0) {
                    JOptionPane.showMessageDialog(this, "Updation failed!");
                    return;
                }
                JOptionPane.showMessageDialog(this, "Doctor UPDATED successfully!");
                model.setRowCount(0);
                hospital.setText("");
                communityName.setText("");
                cityName.setText("");
                hospitalContact.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
        hospitalTable();
    }//GEN-LAST:event_updateHospitalActionPerformed

    private void deleteHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHospitalActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select the row you want to DELETE");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                Appointment appointment = new Appointment();
                appointment.setHospitalName(hospital.getText());

                String sql = "DELETE FROM JDBC_HospitalSchema.HospitalDetails WHERE HospitalName ='" + appointment.getHospitalName() + "'";
                System.out.println(sql);
                int a= statement.executeUpdate(sql);
                if (a == 0) {
                    JOptionPane.showMessageDialog(this, "Deletion failed!");
                    return;
                }
                appointmentList = new ListDirectory();
                JOptionPane.showMessageDialog(this, "Hospital Deleted successfully!");
                model.setRowCount(0);
                hospital.setText("");
                communityName.setText("");
                cityName.setText("");
                hospitalContact.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
        hospitalTable();
    }//GEN-LAST:event_deleteHospitalActionPerformed

    private void createHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHospitalActionPerformed
        // TODO add your handling code here:
        appointmentList = new ListDirectory();
        Appointment appointment = appointmentList.addAppointment();
        appointment.setHospitalName(hospital.getText());
        appointment.setCommunity(communityName.getText());
        appointment.setCity(cityName.getText());
        appointment.setHospitalContact(hospitalContact.getText());

        if (appointment.getHospitalName() == null || appointment.getHospitalName().trim().isEmpty() || "".equals(appointment.getHospitalName())
                || appointment.getCommunity() == null || appointment.getCommunity().trim().isEmpty() || "".equals(appointment.getCommunity())
                || appointment.getCity() == null || appointment.getCity().trim().isEmpty() || "".equals(appointment.getCity())
                || appointment.getHospitalContact() == null || appointment.getHospitalContact().trim().isEmpty() || "".equals(appointment.getHospitalContact())) {
            JOptionPane.showMessageDialog(this, "Please Enter all credentials!");
            return;
        }

        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();

                String sql = "INSERT INTO JDBC_HospitalSchema.HospitalDetails " + "(HospitalName, Community, City, Contact)"
                        + "VALUES ('" + appointment.getHospitalName() + "' ,'" + appointment.getCommunity() + "' , '" + appointment.getCity() + "' , '" + appointment.getHospitalContact() + "');";

                statement.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Hospital created Details!!");
                hospital.setText("");
                communityName.setText("");
                hospitalContact.setText("");
                cityName.setText("");

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
        hospitalTable();
    }//GEN-LAST:event_createHospitalActionPerformed

    private void hospitalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
        int selectedRowIndex = hospitalTable.getSelectedRow();
        String hospitalName = (String) model.getValueAt(selectedRowIndex, 0);
        String commmunity = (String) model.getValueAt(selectedRowIndex, 1);
        String city = (String) model.getValueAt(selectedRowIndex, 2);
        String contact = (String) model.getValueAt(selectedRowIndex, 3);
        hospital.setText(hospitalName);
        communityName.setText(commmunity);
        cityName.setText(hospitalName);
        hospitalContact.setText(contact);
    }//GEN-LAST:event_hospitalTableMouseClicked

    public void hospitalTable() {
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
        try {
            try ( Connection connection = JDBCConnection.Connect()) {
                Statement statement = (Statement) connection.createStatement();
                String sql = "Select * from JDBC_HospitalSchema.HospitalDetails";
                ResultSet resultSet = statement.executeQuery(sql);
                appointmentList = new ListDirectory();
                while (resultSet.next()) {
                    Appointment appointment = appointmentList.addAppointment();
                    appointment.setHospitalName(resultSet.getString("HospitalName"));
                    appointment.setCommunity(resultSet.getString("Community"));
                    appointment.setCity(resultSet.getString("City"));
                    appointment.setHospitalContact(resultSet.getString("Contact"));
                    System.out.println(" Apppointment Time : " + appointment.getTime());

                    model.setRowCount(0);
                    for (Appointment appointmentObj : appointmentList.getAppointment()) {
                        Object[] row = new Object[5];
                        row[0] = appointmentObj.getHospitalName();
                        row[1] = appointmentObj.getCommunity();
                        row[2] = appointmentObj.getCity();
                        row[3] = appointmentObj.getHospitalContact();
                        model.addRow(row);
                    }

                }

            }
            System.out.println("DB Connection Close!!!");
        } catch (HeadlessException | SQLException exception) {
            System.out.println(exception);
            JOptionPane.showMessageDialog(this, exception);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CommunityAdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CommunityAdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CommunityAdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CommunityAdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CommunityAdminView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cityName;
    private javax.swing.JTextField communityName;
    private javax.swing.JButton createHospital;
    private javax.swing.JButton deleteHospital;
    private javax.swing.JTextField hospital;
    private javax.swing.JTextField hospitalContact;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton updateHospital;
    // End of variables declaration//GEN-END:variables
}
